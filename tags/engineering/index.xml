<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Engineering on Tachunn Publication</title><link>https://tachunwu.github.io/tags/engineering/</link><description>Recent content in Engineering on Tachunn Publication</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>💠 © Tachunn</copyright><lastBuildDate>Thu, 23 Feb 2023 16:47:26 +0800</lastBuildDate><atom:link href="https://tachunwu.github.io/tags/engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;Netflix 的軟體設計哲學：Hexagonal Archtecture></title><link>https://tachunwu.github.io/posts/hexagonal/</link><pubDate>Thu, 23 Feb 2023 16:47:26 +0800</pubDate><guid>https://tachunwu.github.io/posts/hexagonal/</guid><description>Index 導言 前言 Chapter 1：高度的整合 Chapter 2：Monolith to Microservices Chapter 3：Hexagonal Architecture Core concepts Data Sources Transport Layer The dependency graph Chapter 4：Swapping data sources！ Production 實際情況 隱藏 data source 的細節 Chapter 5：Testing strategy Interactors test Data sources test E2E test 心得與總結 導言 這篇是整理翻譯 &amp;lt;Ready for changes with Hexagonal Architecture&amp;gt;，其中 Netflix 工程師把它們從 Monolith 轉換到 Microservices 然後介紹 Hexagonal Architecture 種種細節。
建議各位讀者把這篇當成故事，更能了解 Microservices 和 Hexagonal Architecture 誕生的因果。
前言 隨著每年的 Netflix 成長，我們實作 Application 的時候必須維持很高的效率。我們的 Engineering 組織從編劇、播放、排程、供應商管理、獲取劇本內容&amp;hellip;etc，管理超多的 Applications 。</description></item><item><title>&lt;How We Went All In on ：sqlc/pgx for Postgres + Go></title><link>https://tachunwu.github.io/posts/sqlc/</link><pubDate>Sun, 19 Feb 2023 16:58:55 +0800</pubDate><guid>https://tachunwu.github.io/posts/sqlc/</guid><description>註記：作者本人有攝影的興趣，我拿他的一張相片當封面 XD
Index 導言 前言 Tour database/sql lib/pq pgx go-pg gorm Research Queries as strings ORMs sqlc Codegen pgx support appears Caveats and workarounds Summary and future 導言 這篇文章是專為 Go 開發者寫的，主要翻譯 &amp;lt;How We Went All In on sqlc/pgx for Postgres + Go&amp;gt;，這篇文章的作者本身在 Heroku 工作過也在 stripe 工作過，同時也是提出 Idempotent Key API 的人。
現在他在 Crunchy Data 開發 platform API，對於 Postgres 和 Go 都算是非常有經驗的專家，這篇文章會分享一些他對當前生態環境 Go 如何操作 Postgres 的一些看法。
前言 幾個月的實驗和研究後，我們跑了一些 DB-dependent Go app，我們得到一個結論就是 sqlc 可以說是最好的拿來使用的 Postgres (可以能其他 databases 也是)。而且在 Go code 也很容易使用，以下就讓來介紹一下我們的研究吧！</description></item><item><title>&lt;Notion 的 Data Model &amp; Sharding Postgres></title><link>https://tachunwu.github.io/posts/notion/</link><pubDate>Tue, 14 Feb 2023 14:05:32 +0800</pubDate><guid>https://tachunwu.github.io/posts/notion/</guid><description>Index 簡介 Notion 是啥？ Blocks Blocks 的 Schema Blocks 的特色： Dynamic Change Blocks 怎麼組裝和運作起來呢？ Render Tree Indentation Permissions Block 的生命週期 Creating and updating Real-time updates Reading blocks Sharding Sharding 要考慮的問題 Sharding 的解決策略 Sharding 的實際解決方案 Migrating to shards Double-writing with an audit log Backfilling old data Verifying data integrity Difficult lessons learned 早點 Shard 以 zero-downtime migration 為目標 使用 combined primary key 而不是分離的 partition key： 心得 簡介 這篇文章會統整 Notion 兩篇非常重要的工程部落格，分別是 &amp;lt;The data model behind Notion&amp;rsquo;s flexibility&amp;gt; 和 &amp;lt;Herding elephants: Lessons learned from sharding Postgres at Notion&amp;gt;，其簡單扼要地講述了 Notion 背後的工程設計，我一向喜歡研究自己覺得很好用的工具怎麼設計的，就讓我們來看看吧。</description></item><item><title>&lt;OLEP：Online Event Processing 系統設計></title><link>https://tachunwu.github.io/posts/olep/</link><pubDate>Fri, 10 Feb 2023 18:26:57 +0800</pubDate><guid>https://tachunwu.github.io/posts/olep/</guid><description>Index 導言 前言 Applcation Architecture Today：多異質性儲存 Full-text search Data warehousing Stream processing Application-level caching Example: Heterogeneous storage Distributed Transactions Homogeneous distributed transactions Heterogeneous distributed transactions Event Logs Log 的特性 Subscribers 使用 Log 時的重點 Example：Financial Payments System Stage-1. 轉帳請求 Stage-2. Single-threaded 處理 Stage-3. 決策 &amp;amp; 處理 Stage-4. 系統回饋 Stage-5. 接受端 Stage-6. 回報結果 Some notes: Scale OLEP 的優點 Log 獨立性和擴充性 可再維護性 &amp;amp; Debug Data Modeling Data Analysis Distributed Transaction OLEP 的缺點 Latency 一致性問題 心得 導言 今天分享的這篇論文 &amp;lt;Online Event Processing: Achieving consistency where distributed transactions have failed&amp;gt; 是由鼎鼎大名的 Martin Kleppmann 所撰寫，也就是大家熟知 DDIA 的作者 (下圖)，此書被譽為北美軟體工程師必看的一本書。</description></item><item><title>&lt;Database 一代代的演化和傳承></title><link>https://tachunwu.github.io/posts/db-history/</link><pubDate>Wed, 08 Feb 2023 14:51:07 +0800</pubDate><guid>https://tachunwu.github.io/posts/db-history/</guid><description>Index 前言 聲明和導言 1970s：Begin 1980s：Relational &amp;amp; Object-Oriented Databases 1990s：無聊的年代 2000s：Internet Boom！ 早期：老系統還撐著 中期：Middle-ware 晚期：NoSQL Data Warehouse 2010s：Cloud Systems 2010s：Graph Database 2010s：Time-Series Database 2010s：NewSQL Google Spanner NewSQL 黃金年代 哪裡出問題了? Andy Pavlo 的總結 Now：Distributed SQL 大風大浪後的生還者 結語 前言 這篇文章會介紹一些 Database 的種類和歷史，主要參考 CMU Database 教授 Andy Pavlo 的一些演講和授課，例如：
&amp;lt;Andy Pavlo — The official ten-year retrospective of NewSQL databases&amp;gt; &amp;lt;History of Databases (CMU Advanced Databases / Spring 2023)&amp;gt; 聲明和導言 這些演講含金量都很高，所以我會選一些內容來說，比如說 Andy 在 History of Databases 這門課從 1960s 開始講 (我都還沒出生ㄟ XD)，所以這些內容我會省略。還有可能是曇花一現或是我覺得沒有寫的價值的內容 (不有趣也沒有成功的例子)，如果真的有興趣可以自己去看影片。</description></item><item><title>&lt;Kubernetes: 一種爵士即興演出！></title><link>https://tachunwu.github.io/posts/jazz-kubernetes/</link><pubDate>Thu, 02 Feb 2023 23:27:11 +0800</pubDate><guid>https://tachunwu.github.io/posts/jazz-kubernetes/</guid><description>Index 導言 前言 預先知識 其實不是 Container Orchestration？ kubernetes 系統和元件解釋 Datastore: etcd Policy Layer: API Server Business Logic: Controller Manager &amp;amp; Scheduler Scheduler Controller Node Agent: Kubelet Workflow 結論 心得 附錄：chubby Families 導言 這篇文章會翻譯介紹 &amp;lt;Core Kubernetes: Jazz Improv over Orchestration&amp;gt; 這篇文章，主要講解 kubernetes 的運作原理 (不是怎麼使用喔 XD)。文章作者是 kubernetes 三位創始人之一的 Joe Beda，他用很精簡的語言和例子為我們分析 kubernetes 這樣的系統。
前言 這篇文章會仔細講解 kubernetes 內部如何運作，作者直接在第二句話就說，如果你是需要知道如何 Operate kubernetes 的人 (比如說安裝或是用 kubectl)，是不需要懂這些的 XD。這篇文章的受眾，是給那些想要深入了解 kubernetes 內部的人的。
預先知識 由於這篇文章會採用大量篇幅的 kubernetes 專有名詞，所以至少希望你知道一些 kubernetes 的名詞的定義，例如
Pod Node Kubelet …etc 其實不是 Container Orchestration？ 後續的篇幅我們會介紹 kubernetes 是如何運作的，不過作者卻先做了一點名詞上的澄清。如果你去 Google 查 kubernetes，多半會告訴你 kubernetes 是一種 Container Orchestration，Orchestration 這個詞像是有一個交響樂團的中心指揮家，指揮著樂團的演奏。</description></item><item><title>&lt;Discord 如何 Full-text Index 數十億的訊息></title><link>https://tachunwu.github.io/posts/discord-fulltext/</link><pubDate>Mon, 30 Jan 2023 18:02:17 +0800</pubDate><guid>https://tachunwu.github.io/posts/discord-fulltext/</guid><description>Index 前言 需求 解決方案 Question 1：我該用外部的 SaaS 去解決這個問題嗎？ Question 2：有 Open-source 的方案可以用嗎？ 我們該”全面”相信 Elasticsearch 嗎？ 元件的細節 高層次分析 Insert 元件 Shard Manage 元件 Indexing &amp;amp; Mapping the Data 實際上 Coding 的實作 實際在 Production 的過程 初始化實驗 研究的精神 更新的煩惱 The Future Example：Unhealthy Cluster (ran out of heap) Example：Healthy Cluster 結論 感想 前言 這篇部落格會翻譯和參考 &amp;lt;How discord indexes billions of messages&amp;gt; 這篇文章的內容做整理和翻譯。
這篇算是 &amp;lt;Discord 如何處理數十億的訊息&amp;gt; 的下集，當有了最核心的訊息讀寫系統。下一個很重要的 feature 就是 Full-text Search。
舉例來說，User 突然想到以前和同伴討論的某個議題，不可能慢慢滑去找，而是要用像是 Search Engine 這樣的功能，這篇文章就是在介紹 Discord 如何做到這種功能。</description></item><item><title>&lt;Cassandra-based 的設計模型：Chebotko Diagrams></title><link>https://tachunwu.github.io/posts/cassandra/</link><pubDate>Fri, 27 Jan 2023 16:20:23 +0800</pubDate><guid>https://tachunwu.github.io/posts/cassandra/</guid><description>Index 前言 先備知識 目標 Cassandra’s Data Model Keyspace Table Table Example：single-row partitions Table Example：multi-row partitions Query Model Conceptual Data &amp;amp; Application Workflow Modeling 實際案例 Logical Data Modeling Data Modeling Principles Mapping Rules Chebotko Diagrams Notation Logical Chebotko Diagram Physical Chebotko Diagram 注意事項 結論 前言 這篇文章會翻譯和整理一篇論文 &amp;lt;A Big Data Modeling Methodology for Apache Cassandra&amp;gt;，這篇論文是由維護 Apache Cassandra 商用版 DataStax 的工程師所寫的論文 (發表在 2015 IEEE BigDataCongress 上)。
我個人認為非常適合做為學習 Cassandra 這種系統的基石 (如果有經驗一點的讀者會發現 Google BigTable 和 AWS 的 DynamoDB 都可以適用本論文的概念)。</description></item><item><title>&lt;Discord 如何處理一天數億的訊息></title><link>https://tachunwu.github.io/posts/discord-cassandra/</link><pubDate>Sat, 21 Jan 2023 16:06:39 +0800</pubDate><guid>https://tachunwu.github.io/posts/discord-cassandra/</guid><description>Index 前言 目標 故事開始 遇到瓶頸 選新的候選人 問題 需求 Data Modeling Bucket Dark Launch Trade-off Performance 出大事拉 The Future Near Term Long Term 結語 心得 前言 這篇部落格會翻譯和參考 &amp;lt;How Discord Stores Billions of Messages&amp;gt; 這篇部落格的內容做整理和翻譯。
我個人一向喜歡研究自己喜歡用的軟體，身為每天都會上 DC 和朋友社交的我來說，研究一下這麼厲害的服務，也是我的興趣之所在。
目標 這篇文章的目標也很明確，Discord 每天會需要處理一億的訊息 (100 million/day)，這篇文章會解釋他們怎麼做到的。
故事開始 羅馬不是一天造成的，Discord 在 2015 年只花了兩個月就建立好了第一版。當時他們只用了一台 MongoDB 當作主要 Database，作者 (Discord CTO) 也直接講明了，當時選用 MongoDB 純粹只是為了快速疊代產品，以最快的速度去打造市場想要的東西。從一開始就不打算用 Sharding 的 MongoDB，不僅複雜難用而且還不穩定。所以一開始使設計上就給出很大的移植特性。(MongoDB QQ)
在此之上，作者提出 Discord 的核心文化…
Build quickly to prove out a product feature, but always with a path to a more robust solution</description></item><item><title>&lt;Life beyond Distributed Transactions: an Apostate’s Opinion> 碩論筆記</title><link>https://tachunwu.github.io/posts/ms-tcc/</link><pubDate>Wed, 28 Dec 2022 19:12:03 +0800</pubDate><guid>https://tachunwu.github.io/posts/ms-tcc/</guid><description>Index Abstract 假設 Layers of the Appilication &amp;amp; Scale-aware Transactional Scopes 用詞定義 Entities Atmoic Transactions Messages Activities Distributed Transaction Remembering Messages as State Tentative/Cancel/Confirm 個人思考 Abstract 探討 Scale Appilication 的語言學
假設 Layers of the Appilication &amp;amp; Scale-aware 上層不用考慮 Scale 下層需要實作 Scale-aware Transactional Scopes 本文聚焦在討論 Transaction 在特定集合內的 Serializability，我們只要求在特定的機器內部維持隔離性，而不是整個 Data Center 強制維持一致。
用詞定義 Entities 本文定義 Entity 必須擁有一個 ID 或是 Key，而且在 Entity 之內必須擁有唯一的 Serializability。
Atmoic Transactions Atmoic Transaction 不可以涵蓋多數的 Entity。(這邊和 Database 的定義就不太一樣了，這裡更像是應用程式的角度)</description></item></channel></rss>