<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Engineering on Tachunn Publication</title><link>https://tachunwu.github.io/tags/engineering/</link><description>Recent content in Engineering on Tachunn Publication</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>💠 © Tachunn</copyright><lastBuildDate>Thu, 02 Feb 2023 23:27:11 +0800</lastBuildDate><atom:link href="https://tachunwu.github.io/tags/engineering/index.xml" rel="self" type="application/rss+xml"/><item><title>&lt;Kubernetes: 一種爵士即興演出！></title><link>https://tachunwu.github.io/posts/jazz-kubernetes/</link><pubDate>Thu, 02 Feb 2023 23:27:11 +0800</pubDate><guid>https://tachunwu.github.io/posts/jazz-kubernetes/</guid><description>Index 導言 前言 預先知識 其實不是 Container Orchestration？ kubernetes 系統和元件解釋 Datastore: etcd Policy Layer: API Server Business Logic: Controller Manager &amp;amp; Scheduler Scheduler Controller Node Agent: Kubelet Workflow 結論 心得 附錄：chubby Families 導言 這篇文章會翻譯介紹 &amp;lt;Core Kubernetes: Jazz Improv over Orchestration&amp;gt; 這篇文章，主要講解 kubernetes 的運作原理 (不是怎麼使用喔 XD)。文章作者是 kubernetes 三位創始人之一的 Joe Beda，他用很精簡的語言和例子為我們分析 kubernetes 這樣的系統。
前言 這篇文章會仔細講解 kubernetes 內部如何運作，作者直接在第二句話就說，如果你是需要知道如何 Operate kubernetes 的人 (比如說安裝或是用 kubectl)，是不需要懂這些的 XD。這篇文章的受眾，是給那些想要深入了解 kubernetes 內部的人的。
預先知識 由於這篇文章會採用大量篇幅的 k8s 專有名詞，所以至少希望你知道一些 kubernetes 的名詞的定義，例如
Pod Node Kubelet …etc 其實不是 Container Orchestration？ 後續的篇幅我們會介紹 kubernetes 是如何運作的，不過作者卻先做了一點名詞上的澄清。如果你去 Google 查 kubernetes，多半會告訴你這是一種 Container Orchestration，Orchestration 這個詞像是有一個交響樂團的中心指揮家，指揮著樂團的演奏。</description></item><item><title>&lt;Discord 如何 Full-text Index 數十億的訊息></title><link>https://tachunwu.github.io/posts/discord-fulltext/</link><pubDate>Mon, 30 Jan 2023 18:02:17 +0800</pubDate><guid>https://tachunwu.github.io/posts/discord-fulltext/</guid><description>Index 前言 需求 解決方案 Question 1：我該用外部的 SaaS 去解決這個問題嗎？ Question 2：有 Open-source 的方案可以用嗎？ 我們該”全面”相信 Elasticsearch 嗎？ 元件的細節 高層次分析 Insert 元件 Shard Manage 元件 Indexing &amp;amp; Mapping the Data 實際上 Coding 的實作 實際在 Production 的過程 初始化實驗 研究的精神 更新的煩惱 The Future Example：Unhealthy Cluster (ran out of heap) Example：Healthy Cluster 結論 感想 前言 這篇部落格會翻譯和參考 &amp;lt;How discord indexes billions of messages&amp;gt; 這篇文章的內容做整理和翻譯。
這篇算是 &amp;lt;Discord 如何處理數十億的訊息&amp;gt; 的下集，當有了最核心的訊息讀寫系統。下一個很重要的 feature 就是 Full-text Search。
舉例來說，User 突然想到以前和同伴討論的某個議題，不可能慢慢滑去找，而是要用像是 Search Engine 這樣的功能，這篇文章就是在介紹 Discord 如何做到這種功能。</description></item><item><title>&lt;Cassandra-based 的設計模型：Chebotko Diagrams></title><link>https://tachunwu.github.io/posts/cassandra/</link><pubDate>Fri, 27 Jan 2023 16:20:23 +0800</pubDate><guid>https://tachunwu.github.io/posts/cassandra/</guid><description>Index 前言 先備知識 目標 Cassandra’s Data Model Keyspace Table Table Example：single-row partitions Table Example：multi-row partitions Query Model Conceptual Data &amp;amp; Application Workflow Modeling 實際案例 Logical Data Modeling Data Modeling Principles Mapping Rules Chebotko Diagrams Notation Logical Chebotko Diagram Physical Chebotko Diagram 注意事項 結論 前言 這篇文章會翻譯和整理一篇論文 &amp;lt;A Big Data Modeling Methodology for Apache Cassandra&amp;gt;，這篇論文是由維護 Apache Cassandra 商用版 DataStax 的工程師所寫的論文 (發表在 2015 IEEE BigDataCongress 上)。
我個人認為非常適合做為學習 Cassandra 這種系統的基石 (如果有經驗一點的讀者會發現 Google BigTable 和 AWS 的 DynamoDB 都可以適用本論文的概念)。</description></item><item><title>&lt;Discord 如何處理一天數億的訊息></title><link>https://tachunwu.github.io/posts/discord-cassandra/</link><pubDate>Sat, 21 Jan 2023 16:06:39 +0800</pubDate><guid>https://tachunwu.github.io/posts/discord-cassandra/</guid><description>Index 前言 目標 故事開始 遇到瓶頸 選新的候選人 問題 需求 Data Modeling Bucket Dark Launch Trade-off Performance 出大事拉 The Future Near Term Long Term 結語 心得 前言 這篇部落格會翻譯和參考 &amp;lt;How Discord Stores Billions of Messages&amp;gt; 這篇部落格的內容做整理和翻譯。
我個人一向喜歡研究自己喜歡用的軟體，身為每天都會上 DC 和朋友社交的我來說，研究一下這麼厲害的服務，也是我的興趣之所在。
目標 這篇文章的目標也很明確，Discord 每天會需要處理一億的訊息 (100 million/day)，這篇文章會解釋他們怎麼做到的。
故事開始 羅馬不是一天造成的，Discord 在 2015 年只花了兩個月就建立好了第一版。當時他們只用了一台 MongoDB 當作主要 Database，作者 (Discord CTO) 也直接講明了，當時選用 MongoDB 純粹只是為了快速疊代產品，以最快的速度去打造市場想要的東西。從一開始就不打算用 Sharding 的 MongoDB，不僅複雜難用而且還不穩定。所以一開始使設計上就給出很大的移植特性。(MongoDB QQ)
在此之上，作者提出 Discord 的核心文化…
Build quickly to prove out a product feature, but always with a path to a more robust solution</description></item><item><title>&lt;Life beyond Distributed Transactions: an Apostate’s Opinion> 碩論筆記</title><link>https://tachunwu.github.io/posts/ms-tcc/</link><pubDate>Wed, 28 Dec 2022 19:12:03 +0800</pubDate><guid>https://tachunwu.github.io/posts/ms-tcc/</guid><description>Index Abstract 假設 Layers of the Appilication &amp;amp; Scale-aware Transactional Scopes 用詞定義 Entities Atmoic Transactions Messages Activities Distributed Transaction Remembering Messages as State Tentative/Cancel/Confirm 個人思考 Abstract 探討 Scale Appilication 的語言學
假設 Layers of the Appilication &amp;amp; Scale-aware 上層不用考慮 Scale 下層需要實作 Scale-aware Transactional Scopes 本文聚焦在討論 Transaction 在特定集合內的 Serializability，我們只要求在特定的機器內部維持隔離性，而不是整個 Data Center 強制維持一致。
用詞定義 Entities 本文定義 Entity 必須擁有一個 ID 或是 Key，而且在 Entity 之內必須擁有唯一的 Serializability。
Atmoic Transactions Atmoic Transaction 不可以涵蓋多數的 Entity。(這邊和 Database 的定義就不太一樣了，這裡更像是應用程式的角度)</description></item><item><title>&lt;The Art of Notion></title><link>https://tachunwu.github.io/posts/the-art-of-notion/</link><pubDate>Sun, 25 Dec 2022 20:22:36 +0800</pubDate><guid>https://tachunwu.github.io/posts/the-art-of-notion/</guid><description>Index 簡介 Notion 是啥？ Blocks Dynamic Change Render Tree Indentation Permissions Life of a block Creating and updating Real-time updates Reading blocks Sharding 要 Sharding 什麼 Data？ 要怎麼 Partition？ 實際上要建立多少個 Shard，然後我們要怎麼管理？ Decision 1：以 block 為中心 Sharding Decision 2：用 workspace ID 來 partition Decision 3：能力綜合評估 Migrating 簡介 這篇文章會統整 Notion 兩篇非常重要的工程部落格，分別是 和 ，其簡單扼要地講述了 Notion 背後的工程設計，我一向喜歡研究自己覺得很好用的工具怎麼設計的，就讓我們來看看吧。
Notion 是啥？ 對於不知道 Notion 的人我想還是有的 (如果你是這種人，我要特別謝謝你ㄟ哈哈，因為你應該是看到是我寫的才點進來 XD)。它可以說是一款功能非常強大的線上筆記軟體(甚至可以說是資料庫)，我會用來整理幾乎所有我目前在研究的東西。
甚至我寫這篇部落格的草稿也是在 Notion 上而不是 VScode。(雖然我沒收 Notion 錢，但是 Notion 真的是個好軟體) Blocks 這邊建議可以先去創個 Notion 帳號，然後邊玩玩看邊搭配我的文章服用。應該不難發現 Notion 使用起來很直覺，你可以把資訊塊拉來拉去、重新組合。這些資訊小碎片，在 Notion 裡面稱作 Block，每一個小碎片都有以下五個屬性。</description></item></channel></rss>